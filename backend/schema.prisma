// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../packages/data/generated/graphql"
  emitTranspiledCode = true
}

generator api {
  provider = "prisma-nextcrud-api-generator"
  output   = "../packages/data/generated/admin/api"
}

generator admin {
  provider = "prisma-admin-schema-generator"
  output   = "../packages/data/generated/admin"
}

// Features

enum Status {
  DRAFT
  PUBLISHED
}

model Post {
  id        String   @id @default(cuid())
  title     String
  body      String
  status    Status?  @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payments

model Payment {
  id               String @id @default(cuid())
  userId           String
  stripeCustomerId String
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ACL

enum Role {
  USER
  ADMIN
}

model Asset {
  id         String @id @default(cuid())
  resourceId String
  users      User[]
}

// Auth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role?     @default(USER)
  payment       Payment[]
  assets        Asset[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
